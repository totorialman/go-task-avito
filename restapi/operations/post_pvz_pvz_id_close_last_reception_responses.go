// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/totorialman/go-task-avito/models"
)

// PostPvzPvzIDCloseLastReceptionOKCode is the HTTP code returned for type PostPvzPvzIDCloseLastReceptionOK
const PostPvzPvzIDCloseLastReceptionOKCode int = 200

/*
PostPvzPvzIDCloseLastReceptionOK Приемка закрыта

swagger:response postPvzPvzIdCloseLastReceptionOK
*/
type PostPvzPvzIDCloseLastReceptionOK struct {

	/*
	  In: Body
	*/
	Payload *models.Reception `json:"body,omitempty"`
}

// NewPostPvzPvzIDCloseLastReceptionOK creates PostPvzPvzIDCloseLastReceptionOK with default headers values
func NewPostPvzPvzIDCloseLastReceptionOK() *PostPvzPvzIDCloseLastReceptionOK {

	return &PostPvzPvzIDCloseLastReceptionOK{}
}

// WithPayload adds the payload to the post pvz pvz Id close last reception o k response
func (o *PostPvzPvzIDCloseLastReceptionOK) WithPayload(payload *models.Reception) *PostPvzPvzIDCloseLastReceptionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post pvz pvz Id close last reception o k response
func (o *PostPvzPvzIDCloseLastReceptionOK) SetPayload(payload *models.Reception) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPvzPvzIDCloseLastReceptionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPvzPvzIDCloseLastReceptionBadRequestCode is the HTTP code returned for type PostPvzPvzIDCloseLastReceptionBadRequest
const PostPvzPvzIDCloseLastReceptionBadRequestCode int = 400

/*
PostPvzPvzIDCloseLastReceptionBadRequest Неверный запрос или приемка уже закрыта

swagger:response postPvzPvzIdCloseLastReceptionBadRequest
*/
type PostPvzPvzIDCloseLastReceptionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostPvzPvzIDCloseLastReceptionBadRequest creates PostPvzPvzIDCloseLastReceptionBadRequest with default headers values
func NewPostPvzPvzIDCloseLastReceptionBadRequest() *PostPvzPvzIDCloseLastReceptionBadRequest {

	return &PostPvzPvzIDCloseLastReceptionBadRequest{}
}

// WithPayload adds the payload to the post pvz pvz Id close last reception bad request response
func (o *PostPvzPvzIDCloseLastReceptionBadRequest) WithPayload(payload *models.Error) *PostPvzPvzIDCloseLastReceptionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post pvz pvz Id close last reception bad request response
func (o *PostPvzPvzIDCloseLastReceptionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPvzPvzIDCloseLastReceptionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPvzPvzIDCloseLastReceptionForbiddenCode is the HTTP code returned for type PostPvzPvzIDCloseLastReceptionForbidden
const PostPvzPvzIDCloseLastReceptionForbiddenCode int = 403

/*
PostPvzPvzIDCloseLastReceptionForbidden Доступ запрещен

swagger:response postPvzPvzIdCloseLastReceptionForbidden
*/
type PostPvzPvzIDCloseLastReceptionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostPvzPvzIDCloseLastReceptionForbidden creates PostPvzPvzIDCloseLastReceptionForbidden with default headers values
func NewPostPvzPvzIDCloseLastReceptionForbidden() *PostPvzPvzIDCloseLastReceptionForbidden {

	return &PostPvzPvzIDCloseLastReceptionForbidden{}
}

// WithPayload adds the payload to the post pvz pvz Id close last reception forbidden response
func (o *PostPvzPvzIDCloseLastReceptionForbidden) WithPayload(payload *models.Error) *PostPvzPvzIDCloseLastReceptionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post pvz pvz Id close last reception forbidden response
func (o *PostPvzPvzIDCloseLastReceptionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPvzPvzIDCloseLastReceptionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
