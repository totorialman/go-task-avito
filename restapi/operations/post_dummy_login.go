// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDummyLoginHandlerFunc turns a function with the right signature into a post dummy login handler
type PostDummyLoginHandlerFunc func(PostDummyLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDummyLoginHandlerFunc) Handle(params PostDummyLoginParams) middleware.Responder {
	return fn(params)
}

// PostDummyLoginHandler interface for that can handle valid post dummy login params
type PostDummyLoginHandler interface {
	Handle(PostDummyLoginParams) middleware.Responder
}

// NewPostDummyLogin creates a new http.Handler for the post dummy login operation
func NewPostDummyLogin(ctx *middleware.Context, handler PostDummyLoginHandler) *PostDummyLogin {
	return &PostDummyLogin{Context: ctx, Handler: handler}
}

/*
	PostDummyLogin swagger:route POST /dummyLogin postDummyLogin

Получение тестового токена
*/
type PostDummyLogin struct {
	Context *middleware.Context
	Handler PostDummyLoginHandler
}

func (o *PostDummyLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostDummyLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostDummyLoginBody post dummy login body
//
// swagger:model PostDummyLoginBody
type PostDummyLoginBody struct {

	// role
	// Required: true
	// Enum: ["employee","moderator"]
	Role *string `json:"role"`
}

// Validate validates this post dummy login body
func (o *PostDummyLoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postDummyLoginBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["employee","moderator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postDummyLoginBodyTypeRolePropEnum = append(postDummyLoginBodyTypeRolePropEnum, v)
	}
}

const (

	// PostDummyLoginBodyRoleEmployee captures enum value "employee"
	PostDummyLoginBodyRoleEmployee string = "employee"

	// PostDummyLoginBodyRoleModerator captures enum value "moderator"
	PostDummyLoginBodyRoleModerator string = "moderator"
)

// prop value enum
func (o *PostDummyLoginBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postDummyLoginBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostDummyLoginBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	// value enum
	if err := o.validateRoleEnum("body"+"."+"role", "body", *o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post dummy login body based on context it is used
func (o *PostDummyLoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDummyLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDummyLoginBody) UnmarshalBinary(b []byte) error {
	var res PostDummyLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
