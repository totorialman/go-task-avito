// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/totorialman/go-task-avito/models"
)

// GetPvzHandlerFunc turns a function with the right signature into a get pvz handler
type GetPvzHandlerFunc func(GetPvzParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPvzHandlerFunc) Handle(params GetPvzParams) middleware.Responder {
	return fn(params)
}

// GetPvzHandler interface for that can handle valid get pvz params
type GetPvzHandler interface {
	Handle(GetPvzParams) middleware.Responder
}

// NewGetPvz creates a new http.Handler for the get pvz operation
func NewGetPvz(ctx *middleware.Context, handler GetPvzHandler) *GetPvz {
	return &GetPvz{Context: ctx, Handler: handler}
}

/*
	GetPvz swagger:route GET /pvz getPvz

Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией
*/
type GetPvz struct {
	Context *middleware.Context
	Handler GetPvzHandler
}

func (o *GetPvz) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPvzParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetPvzOKBodyItems0 get pvz o k body items0
//
// swagger:model GetPvzOKBodyItems0
type GetPvzOKBodyItems0 struct {

	// pvz
	Pvz *models.PVZ `json:"pvz,omitempty"`

	// receptions
	Receptions []*GetPvzOKBodyItems0ReceptionsItems0 `json:"receptions"`
}

// Validate validates this get pvz o k body items0
func (o *GetPvzOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePvz(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReceptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPvzOKBodyItems0) validatePvz(formats strfmt.Registry) error {
	if swag.IsZero(o.Pvz) { // not required
		return nil
	}

	if o.Pvz != nil {
		if err := o.Pvz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pvz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pvz")
			}
			return err
		}
	}

	return nil
}

func (o *GetPvzOKBodyItems0) validateReceptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Receptions) { // not required
		return nil
	}

	for i := 0; i < len(o.Receptions); i++ {
		if swag.IsZero(o.Receptions[i]) { // not required
			continue
		}

		if o.Receptions[i] != nil {
			if err := o.Receptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("receptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("receptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get pvz o k body items0 based on the context it is used
func (o *GetPvzOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePvz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReceptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPvzOKBodyItems0) contextValidatePvz(ctx context.Context, formats strfmt.Registry) error {

	if o.Pvz != nil {

		if swag.IsZero(o.Pvz) { // not required
			return nil
		}

		if err := o.Pvz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pvz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pvz")
			}
			return err
		}
	}

	return nil
}

func (o *GetPvzOKBodyItems0) contextValidateReceptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Receptions); i++ {

		if o.Receptions[i] != nil {

			if swag.IsZero(o.Receptions[i]) { // not required
				return nil
			}

			if err := o.Receptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("receptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("receptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPvzOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPvzOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPvzOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetPvzOKBodyItems0ReceptionsItems0 get pvz o k body items0 receptions items0
//
// swagger:model GetPvzOKBodyItems0ReceptionsItems0
type GetPvzOKBodyItems0ReceptionsItems0 struct {

	// products
	Products []*models.Product `json:"products"`

	// reception
	Reception *models.Reception `json:"reception,omitempty"`
}

// Validate validates this get pvz o k body items0 receptions items0
func (o *GetPvzOKBodyItems0ReceptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReception(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPvzOKBodyItems0ReceptionsItems0) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	for i := 0; i < len(o.Products); i++ {
		if swag.IsZero(o.Products[i]) { // not required
			continue
		}

		if o.Products[i] != nil {
			if err := o.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPvzOKBodyItems0ReceptionsItems0) validateReception(formats strfmt.Registry) error {
	if swag.IsZero(o.Reception) { // not required
		return nil
	}

	if o.Reception != nil {
		if err := o.Reception.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reception")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reception")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get pvz o k body items0 receptions items0 based on the context it is used
func (o *GetPvzOKBodyItems0ReceptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReception(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPvzOKBodyItems0ReceptionsItems0) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Products); i++ {

		if o.Products[i] != nil {

			if swag.IsZero(o.Products[i]) { // not required
				return nil
			}

			if err := o.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPvzOKBodyItems0ReceptionsItems0) contextValidateReception(ctx context.Context, formats strfmt.Registry) error {

	if o.Reception != nil {

		if swag.IsZero(o.Reception) { // not required
			return nil
		}

		if err := o.Reception.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reception")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reception")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPvzOKBodyItems0ReceptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPvzOKBodyItems0ReceptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetPvzOKBodyItems0ReceptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
