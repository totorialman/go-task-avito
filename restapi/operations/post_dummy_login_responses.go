// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/totorialman/go-task-avito/models"
)

// PostDummyLoginOKCode is the HTTP code returned for type PostDummyLoginOK
const PostDummyLoginOKCode int = 200

/*
PostDummyLoginOK Успешная авторизация

swagger:response postDummyLoginOK
*/
type PostDummyLoginOK struct {

	/*
	  In: Body
	*/
	Payload models.Token `json:"body,omitempty"`
}

// NewPostDummyLoginOK creates PostDummyLoginOK with default headers values
func NewPostDummyLoginOK() *PostDummyLoginOK {

	return &PostDummyLoginOK{}
}

// WithPayload adds the payload to the post dummy login o k response
func (o *PostDummyLoginOK) WithPayload(payload models.Token) *PostDummyLoginOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dummy login o k response
func (o *PostDummyLoginOK) SetPayload(payload models.Token) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDummyLoginOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostDummyLoginBadRequestCode is the HTTP code returned for type PostDummyLoginBadRequest
const PostDummyLoginBadRequestCode int = 400

/*
PostDummyLoginBadRequest Неверный запрос

swagger:response postDummyLoginBadRequest
*/
type PostDummyLoginBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostDummyLoginBadRequest creates PostDummyLoginBadRequest with default headers values
func NewPostDummyLoginBadRequest() *PostDummyLoginBadRequest {

	return &PostDummyLoginBadRequest{}
}

// WithPayload adds the payload to the post dummy login bad request response
func (o *PostDummyLoginBadRequest) WithPayload(payload *models.Error) *PostDummyLoginBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dummy login bad request response
func (o *PostDummyLoginBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDummyLoginBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
