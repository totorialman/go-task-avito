// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostPvzPvzIDDeleteLastProductHandlerFunc turns a function with the right signature into a post pvz pvz ID delete last product handler
type PostPvzPvzIDDeleteLastProductHandlerFunc func(PostPvzPvzIDDeleteLastProductParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPvzPvzIDDeleteLastProductHandlerFunc) Handle(params PostPvzPvzIDDeleteLastProductParams) middleware.Responder {
	return fn(params)
}

// PostPvzPvzIDDeleteLastProductHandler interface for that can handle valid post pvz pvz ID delete last product params
type PostPvzPvzIDDeleteLastProductHandler interface {
	Handle(PostPvzPvzIDDeleteLastProductParams) middleware.Responder
}

// NewPostPvzPvzIDDeleteLastProduct creates a new http.Handler for the post pvz pvz ID delete last product operation
func NewPostPvzPvzIDDeleteLastProduct(ctx *middleware.Context, handler PostPvzPvzIDDeleteLastProductHandler) *PostPvzPvzIDDeleteLastProduct {
	return &PostPvzPvzIDDeleteLastProduct{Context: ctx, Handler: handler}
}

/*
	PostPvzPvzIDDeleteLastProduct swagger:route POST /pvz/{pvzId}/delete_last_product postPvzPvzIdDeleteLastProduct

Удаление последнего добавленного товара из текущей приемки (LIFO, только для сотрудников ПВЗ)
*/
type PostPvzPvzIDDeleteLastProduct struct {
	Context *middleware.Context
	Handler PostPvzPvzIDDeleteLastProductHandler
}

func (o *PostPvzPvzIDDeleteLastProduct) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPvzPvzIDDeleteLastProductParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
