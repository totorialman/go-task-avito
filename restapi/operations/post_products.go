// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostProductsHandlerFunc turns a function with the right signature into a post products handler
type PostProductsHandlerFunc func(PostProductsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostProductsHandlerFunc) Handle(params PostProductsParams) middleware.Responder {
	return fn(params)
}

// PostProductsHandler interface for that can handle valid post products params
type PostProductsHandler interface {
	Handle(PostProductsParams) middleware.Responder
}

// NewPostProducts creates a new http.Handler for the post products operation
func NewPostProducts(ctx *middleware.Context, handler PostProductsHandler) *PostProducts {
	return &PostProducts{Context: ctx, Handler: handler}
}

/*
	PostProducts swagger:route POST /products postProducts

Добавление товара в текущую приемку (только для сотрудников ПВЗ)
*/
type PostProducts struct {
	Context *middleware.Context
	Handler PostProductsHandler
}

func (o *PostProducts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostProductsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostProductsBody post products body
//
// swagger:model PostProductsBody
type PostProductsBody struct {

	// pvz Id
	// Required: true
	// Format: uuid
	PvzID *strfmt.UUID `json:"pvzId"`

	// type
	// Required: true
	// Enum: ["электроника","одежда","обувь"]
	Type *string `json:"type"`
}

// Validate validates this post products body
func (o *PostProductsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePvzID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProductsBody) validatePvzID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"pvzId", "body", o.PvzID); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"pvzId", "body", "uuid", o.PvzID.String(), formats); err != nil {
		return err
	}

	return nil
}

var postProductsBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["электроника","одежда","обувь"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postProductsBodyTypeTypePropEnum = append(postProductsBodyTypeTypePropEnum, v)
	}
}

const (

	// PostProductsBodyTypeЭлектроника captures enum value "электроника"
	PostProductsBodyTypeЭлектроника string = "электроника"

	// PostProductsBodyTypeОдежда captures enum value "одежда"
	PostProductsBodyTypeОдежда string = "одежда"

	// PostProductsBodyTypeОбувь captures enum value "обувь"
	PostProductsBodyTypeОбувь string = "обувь"
)

// prop value enum
func (o *PostProductsBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postProductsBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostProductsBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post products body based on context it is used
func (o *PostProductsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostProductsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProductsBody) UnmarshalBinary(b []byte) error {
	var res PostProductsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
