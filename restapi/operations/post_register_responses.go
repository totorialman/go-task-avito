// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/totorialman/go-task-avito/models"
)

// PostRegisterCreatedCode is the HTTP code returned for type PostRegisterCreated
const PostRegisterCreatedCode int = 201

/*
PostRegisterCreated Пользователь создан

swagger:response postRegisterCreated
*/
type PostRegisterCreated struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPostRegisterCreated creates PostRegisterCreated with default headers values
func NewPostRegisterCreated() *PostRegisterCreated {

	return &PostRegisterCreated{}
}

// WithPayload adds the payload to the post register created response
func (o *PostRegisterCreated) WithPayload(payload *models.User) *PostRegisterCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register created response
func (o *PostRegisterCreated) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterBadRequestCode is the HTTP code returned for type PostRegisterBadRequest
const PostRegisterBadRequestCode int = 400

/*
PostRegisterBadRequest Неверный запрос

swagger:response postRegisterBadRequest
*/
type PostRegisterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRegisterBadRequest creates PostRegisterBadRequest with default headers values
func NewPostRegisterBadRequest() *PostRegisterBadRequest {

	return &PostRegisterBadRequest{}
}

// WithPayload adds the payload to the post register bad request response
func (o *PostRegisterBadRequest) WithPayload(payload *models.Error) *PostRegisterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register bad request response
func (o *PostRegisterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
