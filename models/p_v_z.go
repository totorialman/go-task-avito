// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PVZ p v z
//
// swagger:model PVZ
type PVZ struct {

	// city
	// Required: true
	// Enum: ["Москва","Санкт-Петербург","Казань"]
	City *string `json:"city"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// registration date
	// Format: date-time
	RegistrationDate strfmt.DateTime `json:"registrationDate,omitempty"`
}

// Validate validates this p v z
func (m *PVZ) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pVZTypeCityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Москва","Санкт-Петербург","Казань"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pVZTypeCityPropEnum = append(pVZTypeCityPropEnum, v)
	}
}

const (

	// PVZCityМосква captures enum value "Москва"
	PVZCityМосква string = "Москва"

	// PVZCityСанктDashПетербург captures enum value "Санкт-Петербург"
	PVZCityСанктDashПетербург string = "Санкт-Петербург"

	// PVZCityКазань captures enum value "Казань"
	PVZCityКазань string = "Казань"
)

// prop value enum
func (m *PVZ) validateCityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pVZTypeCityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PVZ) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	// value enum
	if err := m.validateCityEnum("city", "body", *m.City); err != nil {
		return err
	}

	return nil
}

func (m *PVZ) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PVZ) validateRegistrationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("registrationDate", "body", "date-time", m.RegistrationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this p v z based on context it is used
func (m *PVZ) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PVZ) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PVZ) UnmarshalBinary(b []byte) error {
	var res PVZ
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
