// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product product
//
// swagger:model Product
type Product struct {

	// date time
	// Format: date-time
	DateTime strfmt.DateTime `json:"dateTime,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// reception Id
	// Required: true
	// Format: uuid
	ReceptionID *strfmt.UUID `json:"receptionId"`

	// type
	// Required: true
	// Enum: ["электроника","одежда","обувь"]
	Type *string `json:"type"`
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("dateTime", "body", "date-time", m.DateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateReceptionID(formats strfmt.Registry) error {

	if err := validate.Required("receptionId", "body", m.ReceptionID); err != nil {
		return err
	}

	if err := validate.FormatOf("receptionId", "body", "uuid", m.ReceptionID.String(), formats); err != nil {
		return err
	}

	return nil
}

var productTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["электроника","одежда","обувь"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productTypeTypePropEnum = append(productTypeTypePropEnum, v)
	}
}

const (

	// ProductTypeЭлектроника captures enum value "электроника"
	ProductTypeЭлектроника string = "электроника"

	// ProductTypeОдежда captures enum value "одежда"
	ProductTypeОдежда string = "одежда"

	// ProductTypeОбувь captures enum value "обувь"
	ProductTypeОбувь string = "обувь"
)

// prop value enum
func (m *Product) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Product) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product based on context it is used
func (m *Product) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
